/**
 * PDF Utilities - Debug helpers
 */

import * as pdfjsLib from 'pdfjs-dist';

// Use a local worker file instead of CDN
if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {
  // Using the ES module worker from the local package
  pdfjsLib.GlobalWorkerOptions.workerSrc = new URL(
    'pdfjs-dist/build/pdf.worker.mjs',
    import.meta.url
  ).toString();
}

/**
 * Test if PDF.js is correctly configured by creating a simple PDF
 */
export const testPdfConfig = async (): Promise<boolean> => {
  try {
    console.log('PDF.js Version:', pdfjsLib.version);
    console.log('Worker Source:', pdfjsLib.GlobalWorkerOptions.workerSrc);
    
    // Create a simple empty PDF
    const data = new Uint8Array([
      0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x25, 0xc7, 0xec,
      0x8f, 0xa2, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
      0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c,
      0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30,
      0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
      0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54,
      0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x4b, 0x69,
      0x64, 0x73, 0x5b, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x2f, 0x43, 0x6f,
      0x75, 0x6e, 0x74, 0x20, 0x31, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f,
      0x62, 0x6a, 0x0a, 0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
      0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f,
      0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52,
      0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x34, 0x20,
      0x30, 0x20, 0x52, 0x5d, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62,
      0x6a, 0x0a, 0x34, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c,
      0x2f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x46, 0x6c, 0x61, 0x74,
      0x65, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3e, 0x0a, 0x73, 0x74,
      0x72, 0x65, 0x61, 0x6d, 0x0a, 0x78, 0x9c, 0x73, 0x2e, 0x4d, 0x73, 0x30,
      0x32, 0xd4, 0x33, 0x34, 0xb0, 0x52, 0x48, 0x2c, 0x2a, 0x51, 0x50, 0x48,
      0x2d, 0x4a, 0x87, 0xf0, 0x93, 0x12, 0x0b, 0x14, 0x32, 0x73, 0x13, 0x0b,
      0x12, 0x8b, 0x14, 0x92, 0xf3, 0x8b, 0x73, 0x13, 0x73, 0x14, 0x94, 0x60,
      0x22, 0x80, 0xdc, 0xcc, 0x26, 0x47, 0x01, 0x00, 0x8b, 0xa2, 0x17, 0xbb,
      0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a, 0x65,
      0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x30,
      0x20, 0x35, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x0a, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x39, 0x20, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x20, 0x6e, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x39, 0x33, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x37, 0x32, 0x20, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x32, 0x37, 0x33, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
      0x6e, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, 0x3c, 0x3c,
      0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x35, 0x2f, 0x52, 0x6f, 0x6f, 0x74,
      0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x61,
      0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x34, 0x31, 0x33, 0x0a, 0x25,
      0x25, 0x45, 0x4f, 0x46, 0x0a
    ]);
    
    // Load the PDF document
    const loadingTask = pdfjsLib.getDocument({ data });
    const pdf = await loadingTask.promise;
    
    console.log('Test PDF loaded successfully with', pdf.numPages, 'pages');
    
    return true;
  } catch (error) {
    console.error('Error testing PDF configuration:', error);
    return false;
  }
};

/**
 * Test if PDF file extraction works by testing on a simple ArrayBuffer
 */
export const testPdfExtraction = async (file: File): Promise<string> => {
  try {
    console.log('Testing PDF extraction with file:', file.name);
    
    // Log detailed info about the file
    console.log({
      name: file.name,
      type: file.type,
      size: file.size,
      lastModified: new Date(file.lastModified).toISOString()
    });
    
    // Read the file as ArrayBuffer
    const arrayBuffer = await file.arrayBuffer();
    console.log('File read as ArrayBuffer, size:', arrayBuffer.byteLength, 'bytes');
    
    // Load the PDF document
    const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer });
    const pdf = await loadingTask.promise;
    console.log('PDF loaded, pages:', pdf.numPages);
    
    // Extract text from first page only for testing
    if (pdf.numPages > 0) {
      const page = await pdf.getPage(1);
      const textContent = await page.getTextContent();
      
      console.log('Text content items:', textContent.items.length);
      
      // Join text items
      const text = textContent.items
        .map((item: any) => item.str || '')
        .join(' ');
      
      return text;
    }
    
    return 'No pages found in the PDF';
  } catch (error) {
    console.error('Error in PDF extraction test:', error);
    throw new Error(`PDF test extraction failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}; 